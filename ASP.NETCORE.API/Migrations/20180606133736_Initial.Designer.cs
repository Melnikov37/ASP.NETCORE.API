// <auto-generated />
using ASP.NETCORE.API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace ASP.NETCORE.API.Migrations
{
    [DbContext(typeof(TravelAgencyDataBaseContext))]
    [Migration("20180606133736_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ASP.NETCORE.API.Models.BusinessSer", b =>
                {
                    b.Property<int>("BusinessSerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BusinessSerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("BusinessSerId");

                    b.ToTable("BusinessSer");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.BusinessSerAtTour", b =>
                {
                    b.Property<int>("BusinessSerArTourId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BusinessSerId");

                    b.Property<int>("TouristDestinationId");

                    b.HasKey("BusinessSerArTourId");

                    b.HasIndex("BusinessSerId");

                    b.ToTable("BusinessSerAtTour");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.CleaningSer", b =>
                {
                    b.Property<int>("CleaningSerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CleaningSerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("CleaningSerId");

                    b.ToTable("CleaningSer");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.CleaningSerAtTour", b =>
                {
                    b.Property<int>("CleaningSerAtTourId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CleaningSerId");

                    b.Property<int>("TouristDestinationId");

                    b.HasKey("CleaningSerAtTourId");

                    b.HasIndex("CleaningSerId");

                    b.HasIndex("TouristDestinationId");

                    b.ToTable("CleaningSerAtTour");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.Conditions", b =>
                {
                    b.Property<int>("ConditionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConditionName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("ConditionId");

                    b.ToTable("Conditions");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.Deals", b =>
                {
                    b.Property<int>("DealId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<int>("ConditionId");

                    b.Property<DateTime>("DealConclusionDate")
                        .HasColumnType("date");

                    b.Property<float?>("DealDiscountRate");

                    b.Property<int?>("EmployeeId");

                    b.Property<int>("TourId");

                    b.HasKey("DealId");

                    b.HasIndex("ConditionId");

                    b.HasIndex("TourId");

                    b.ToTable("Deals");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.EntertaimentSer", b =>
                {
                    b.Property<int>("EntertaimentSerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EntertaimentSerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("EntertaimentSerId");

                    b.ToTable("EntertaimentSer");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.EntertaimentSerAtTour", b =>
                {
                    b.Property<int>("EntertaimentSerAtTourId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EntertaimentSerId");

                    b.Property<int>("TouristDestinationId");

                    b.HasKey("EntertaimentSerAtTourId");

                    b.HasIndex("EntertaimentSerId");

                    b.HasIndex("TouristDestinationId");

                    b.ToTable("EntertaimentSerAtTour");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.FoodType", b =>
                {
                    b.Property<int>("FoodTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FoodTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("FoodTypeId");

                    b.ToTable("FoodType");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.FoodTypeAtTour", b =>
                {
                    b.Property<int>("FoodTypeAtTourId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FoodTypeId");

                    b.Property<int>("TouristDestinationId");

                    b.HasKey("FoodTypeAtTourId");

                    b.HasIndex("FoodTypeId");

                    b.HasIndex("TouristDestinationId");

                    b.ToTable("FoodTypeAtTour");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.HealthAndBeautySer", b =>
                {
                    b.Property<int>("HealthAndBeautySerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("HealthAndBeautySerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("HealthAndBeautySerId");

                    b.ToTable("HealthAndBeautySer");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.HealthAndBeautySerAtTour", b =>
                {
                    b.Property<int>("HealthAndBeautySerAtTourId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("HealthAndBeautySerId");

                    b.Property<int>("TouristDestinationId");

                    b.HasKey("HealthAndBeautySerAtTourId");

                    b.HasIndex("HealthAndBeautySerId");

                    b.HasIndex("TouristDestinationId");

                    b.ToTable("HealthAndBeautySerAtTour");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.InternetSer", b =>
                {
                    b.Property<int>("InternetSerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("InternetSerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("InternetSerId");

                    b.ToTable("InternetSer");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.InternetSerAtTour", b =>
                {
                    b.Property<int>("InternetSerAtTourId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("InternetSerId");

                    b.Property<int>("TouristDestinationsId");

                    b.HasKey("InternetSerAtTourId");

                    b.HasIndex("InternetSerId");

                    b.HasIndex("TouristDestinationsId");

                    b.ToTable("InternetSerAtTour");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.ParkingSer", b =>
                {
                    b.Property<int>("ParkingSerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ParkingSerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("ParkingSerId");

                    b.ToTable("ParkingSer");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.ParkingSerAtTour", b =>
                {
                    b.Property<int>("ParkingSerAtTourId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ParkingSerId");

                    b.Property<int>("TouristDestinationsId");

                    b.HasKey("ParkingSerAtTourId");

                    b.HasIndex("ParkingSerId");

                    b.HasIndex("TouristDestinationsId");

                    b.ToTable("ParkingSerAtTour");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.Photos", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PhotoName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("TouristDestinationId");

                    b.Property<string>("UrlLlink")
                        .IsRequired()
                        .HasColumnName("UrlLLink")
                        .HasMaxLength(400)
                        .IsUnicode(false);

                    b.HasKey("PhotoId");

                    b.HasIndex("TouristDestinationId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.PlaceDestinations", b =>
                {
                    b.Property<int>("PlaceDestinationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("PlaceDestinationId");

                    b.ToTable("PlaceDestinations");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("RatingValue");

                    b.Property<int>("TouristDestinationsId");

                    b.Property<int>("UserId");

                    b.HasKey("RatingId");

                    b.HasIndex("TouristDestinationsId");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.RestOnWaterSer", b =>
                {
                    b.Property<int>("RestOnWaterSerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RestOnWaterSerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("RestOnWaterSerId");

                    b.ToTable("RestOnWaterSer");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.RestOnWaterSerAtTour", b =>
                {
                    b.Property<int>("RestOnWaterSerAtTourId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("RestOnWaterSerId");

                    b.Property<int>("TouristDestinationId");

                    b.HasKey("RestOnWaterSerAtTourId");

                    b.HasIndex("RestOnWaterSerId");

                    b.HasIndex("TouristDestinationId");

                    b.ToTable("RestOnWaterSerAtTour");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.RoomFacilities", b =>
                {
                    b.Property<int>("RoomFacilitiesId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RoomFacilitiesName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("RoomFacilitiesId");

                    b.ToTable("RoomFacilities");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.RoomFacilitiesAtTour", b =>
                {
                    b.Property<int>("RoomFacilitiesAtTourId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("RoomFacilitiesId");

                    b.Property<int>("TouristDestinationsId");

                    b.HasKey("RoomFacilitiesAtTourId");

                    b.HasIndex("RoomFacilitiesId");

                    b.HasIndex("TouristDestinationsId");

                    b.ToTable("RoomFacilitiesAtTour");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.RoomType", b =>
                {
                    b.Property<int>("RoomTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RoomTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("RoomTypeId");

                    b.ToTable("RoomType");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.RoomTypeAtTour", b =>
                {
                    b.Property<int>("RoomTypeAtTourId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("RoomTypeId");

                    b.Property<int>("TouristDestinationId");

                    b.HasKey("RoomTypeAtTourId");

                    b.HasIndex("RoomTypeId");

                    b.HasIndex("TouristDestinationId");

                    b.ToTable("RoomTypeAtTour");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.SmokingSer", b =>
                {
                    b.Property<int>("SmokingSerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("SmokingSerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("SmokingSerId");

                    b.ToTable("SmokingSer");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.SmokingSerAtTour", b =>
                {
                    b.Property<int>("SmokingSerAtTourId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("SmokingSerId");

                    b.Property<int>("TouristDestinationId");

                    b.HasKey("SmokingSerAtTourId");

                    b.HasIndex("SmokingSerId");

                    b.HasIndex("TouristDestinationId");

                    b.ToTable("SmokingSerAtTour");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.SportSer", b =>
                {
                    b.Property<int>("SportSerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("SportSerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("SportSerId");

                    b.ToTable("SportSer");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.SportSerAtTour", b =>
                {
                    b.Property<int>("SportSerAtTourId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("SportSerId");

                    b.Property<int>("TouristDestinationsId");

                    b.HasKey("SportSerAtTourId");

                    b.HasIndex("SportSerId");

                    b.HasIndex("TouristDestinationsId");

                    b.ToTable("SportSerAtTour");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.TouristDestinations", b =>
                {
                    b.Property<int>("TouristDestinationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DescriptionHotel")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<int?>("DistanceToAirport");

                    b.Property<string>("HotelEmail")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("HotelFax")
                        .HasMaxLength(17)
                        .IsUnicode(false);

                    b.Property<string>("HotelName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("HotelPhone")
                        .HasMaxLength(17)
                        .IsUnicode(false);

                    b.Property<string>("HotelSite")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("NumberOfRooms");

                    b.Property<int?>("NumberStars");

                    b.Property<int?>("PhotoId");

                    b.Property<int>("PlaceDestinationId");

                    b.HasKey("TouristDestinationId");

                    b.HasIndex("PhotoId");

                    b.HasIndex("PlaceDestinationId");

                    b.ToTable("TouristDestinations");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.TourOperators", b =>
                {
                    b.Property<int>("TourOperatorId")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("Commission");

                    b.Property<string>("TourOperatorName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("TourOperatorId");

                    b.ToTable("TourOperators");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.Tours", b =>
                {
                    b.Property<int>("TourId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("FoodTypeId");

                    b.Property<string>("PointDeparture")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("RoomTypeId");

                    b.Property<DateTime>("TourArrivalDate")
                        .HasColumnType("date");

                    b.Property<float>("TourCost");

                    b.Property<DateTime>("TourDepartureDate")
                        .HasColumnType("date");

                    b.Property<int>("TourNumberPerson");

                    b.Property<int?>("TourNumberPersons");

                    b.Property<int?>("TourNumberTransactions");

                    b.Property<int?>("TourOperatorId");

                    b.Property<int?>("TouristDestinationId");

                    b.Property<int?>("TransportId");

                    b.HasKey("TourId");

                    b.HasIndex("FoodTypeId");

                    b.HasIndex("RoomTypeId");

                    b.HasIndex("TourOperatorId");

                    b.HasIndex("TouristDestinationId");

                    b.HasIndex("TransportId");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.Transports", b =>
                {
                    b.Property<int>("TransportId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("TransportName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("TransportId");

                    b.ToTable("Transports");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.TransportSer", b =>
                {
                    b.Property<int>("TransportSerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("TransportSerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("TransportSerId");

                    b.ToTable("TransportSer");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.TransportSerAtTour", b =>
                {
                    b.Property<int>("TransportSerAtTourId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("TouristDestinationsId");

                    b.Property<int>("TransportSerId");

                    b.HasKey("TransportSerAtTourId");

                    b.HasIndex("TouristDestinationsId");

                    b.HasIndex("TransportSerId");

                    b.ToTable("TransportSerAtTour");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.BusinessSerAtTour", b =>
                {
                    b.HasOne("ASP.NETCORE.API.Models.BusinessSer", "BusinessSer")
                        .WithMany("BusinessSerAtTour")
                        .HasForeignKey("BusinessSerId")
                        .HasConstraintName("FK_BusinessSerAtTour_BusinessSer");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.CleaningSerAtTour", b =>
                {
                    b.HasOne("ASP.NETCORE.API.Models.CleaningSer", "CleaningSer")
                        .WithMany("CleaningSerAtTour")
                        .HasForeignKey("CleaningSerId")
                        .HasConstraintName("FK_CleaningSerAtTour_CleaningSer");

                    b.HasOne("ASP.NETCORE.API.Models.TouristDestinations", "TouristDestination")
                        .WithMany("CleaningSerAtTour")
                        .HasForeignKey("TouristDestinationId")
                        .HasConstraintName("FK_CleaningSerAtTour_CleaningSerAtTour");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.Deals", b =>
                {
                    b.HasOne("ASP.NETCORE.API.Models.Conditions", "Condition")
                        .WithMany("Deals")
                        .HasForeignKey("ConditionId")
                        .HasConstraintName("FK_Deals_Conditions");

                    b.HasOne("ASP.NETCORE.API.Models.Tours", "Tour")
                        .WithMany("Deals")
                        .HasForeignKey("TourId")
                        .HasConstraintName("FK_Deals_Tours");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.EntertaimentSerAtTour", b =>
                {
                    b.HasOne("ASP.NETCORE.API.Models.EntertaimentSer", "EntertaimentSer")
                        .WithMany("EntertaimentSerAtTour")
                        .HasForeignKey("EntertaimentSerId")
                        .HasConstraintName("FK_EntertaimentSerAtTour_EntertaimentSer");

                    b.HasOne("ASP.NETCORE.API.Models.TouristDestinations", "TouristDestination")
                        .WithMany("EntertaimentSerAtTour")
                        .HasForeignKey("TouristDestinationId")
                        .HasConstraintName("FK_EntertaimentSerAtTour_TouristDestinations");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.FoodTypeAtTour", b =>
                {
                    b.HasOne("ASP.NETCORE.API.Models.FoodType", "FoodType")
                        .WithMany("FoodTypeAtTour")
                        .HasForeignKey("FoodTypeId")
                        .HasConstraintName("FK_FoodTypeAtTour_FoodType");

                    b.HasOne("ASP.NETCORE.API.Models.TouristDestinations", "TouristDestination")
                        .WithMany("FoodTypeAtTour")
                        .HasForeignKey("TouristDestinationId")
                        .HasConstraintName("FK_FoodTypeAtTour_TouristDestinations");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.HealthAndBeautySerAtTour", b =>
                {
                    b.HasOne("ASP.NETCORE.API.Models.HealthAndBeautySer", "HealthAndBeautySer")
                        .WithMany("HealthAndBeautySerAtTour")
                        .HasForeignKey("HealthAndBeautySerId")
                        .HasConstraintName("FK_HealthAndBeautySerAtTour_HealthAndBeautySer");

                    b.HasOne("ASP.NETCORE.API.Models.TouristDestinations", "TouristDestination")
                        .WithMany("HealthAndBeautySerAtTour")
                        .HasForeignKey("TouristDestinationId")
                        .HasConstraintName("FK_HealthAndBeautySerAtTour_TouristDestinations");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.InternetSerAtTour", b =>
                {
                    b.HasOne("ASP.NETCORE.API.Models.InternetSer", "InternetSer")
                        .WithMany("InternetSerAtTour")
                        .HasForeignKey("InternetSerId")
                        .HasConstraintName("FK_InternetSerAtTour_InternetSer");

                    b.HasOne("ASP.NETCORE.API.Models.TouristDestinations", "TouristDestinations")
                        .WithMany("InternetSerAtTour")
                        .HasForeignKey("TouristDestinationsId")
                        .HasConstraintName("FK_InternetSerAtTour_TouristDestinations");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.ParkingSerAtTour", b =>
                {
                    b.HasOne("ASP.NETCORE.API.Models.ParkingSer", "ParkingSer")
                        .WithMany("ParkingSerAtTour")
                        .HasForeignKey("ParkingSerId")
                        .HasConstraintName("FK_ParkingSerAtTour_ParkingSer");

                    b.HasOne("ASP.NETCORE.API.Models.TouristDestinations", "TouristDestinations")
                        .WithMany("ParkingSerAtTour")
                        .HasForeignKey("TouristDestinationsId")
                        .HasConstraintName("FK_ParkingSerAtTour_TouristDestinations");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.Photos", b =>
                {
                    b.HasOne("ASP.NETCORE.API.Models.TouristDestinations", "TouristDestination")
                        .WithMany("Photos")
                        .HasForeignKey("TouristDestinationId")
                        .HasConstraintName("FK_Photos_TouristDestinations");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.Rating", b =>
                {
                    b.HasOne("ASP.NETCORE.API.Models.TouristDestinations", "TouristDestinations")
                        .WithMany("Rating")
                        .HasForeignKey("TouristDestinationsId")
                        .HasConstraintName("FK_Rating_TouristDestinations");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.RestOnWaterSerAtTour", b =>
                {
                    b.HasOne("ASP.NETCORE.API.Models.RestOnWaterSer", "RestOnWaterSer")
                        .WithMany("RestOnWaterSerAtTour")
                        .HasForeignKey("RestOnWaterSerId")
                        .HasConstraintName("FK_RestOnWaterSerAtTour_RestOnWaterSer");

                    b.HasOne("ASP.NETCORE.API.Models.TouristDestinations", "TouristDestination")
                        .WithMany("RestOnWaterSerAtTour")
                        .HasForeignKey("TouristDestinationId")
                        .HasConstraintName("FK_RestOnWaterSerAtTour_TouristDestinations");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.RoomFacilitiesAtTour", b =>
                {
                    b.HasOne("ASP.NETCORE.API.Models.RoomFacilities", "RoomFacilities")
                        .WithMany("RoomFacilitiesAtTour")
                        .HasForeignKey("RoomFacilitiesId")
                        .HasConstraintName("FK_RoomFacilitiesAtTour_RoomFacilities");

                    b.HasOne("ASP.NETCORE.API.Models.TouristDestinations", "TouristDestinations")
                        .WithMany("RoomFacilitiesAtTour")
                        .HasForeignKey("TouristDestinationsId")
                        .HasConstraintName("FK_RoomFacilitiesAtTour_TouristDestinations");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.RoomTypeAtTour", b =>
                {
                    b.HasOne("ASP.NETCORE.API.Models.RoomType", "RoomType")
                        .WithMany("RoomTypeAtTour")
                        .HasForeignKey("RoomTypeId")
                        .HasConstraintName("FK_RoomTypeAtTour_RoomType");

                    b.HasOne("ASP.NETCORE.API.Models.TouristDestinations", "TouristDestination")
                        .WithMany("RoomTypeAtTour")
                        .HasForeignKey("TouristDestinationId")
                        .HasConstraintName("FK_RoomTypeAtTour_TouristDestinations");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.SmokingSerAtTour", b =>
                {
                    b.HasOne("ASP.NETCORE.API.Models.SmokingSer", "SmokingSer")
                        .WithMany("SmokingSerAtTour")
                        .HasForeignKey("SmokingSerId")
                        .HasConstraintName("FK_SmokingSerAtTour_SmokingSer");

                    b.HasOne("ASP.NETCORE.API.Models.TouristDestinations", "TouristDestination")
                        .WithMany("SmokingSerAtTour")
                        .HasForeignKey("TouristDestinationId")
                        .HasConstraintName("FK_SmokingSerAtTour_TouristDestinations");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.SportSerAtTour", b =>
                {
                    b.HasOne("ASP.NETCORE.API.Models.SportSer", "SportSer")
                        .WithMany("SportSerAtTour")
                        .HasForeignKey("SportSerId")
                        .HasConstraintName("FK_SportSerAtTour_SportSer");

                    b.HasOne("ASP.NETCORE.API.Models.TouristDestinations", "TouristDestinations")
                        .WithMany("SportSerAtTour")
                        .HasForeignKey("TouristDestinationsId")
                        .HasConstraintName("FK_SportSerAtTour_TouristDestinations");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.TouristDestinations", b =>
                {
                    b.HasOne("ASP.NETCORE.API.Models.Photos", "Photo")
                        .WithMany("TouristDestinations")
                        .HasForeignKey("PhotoId")
                        .HasConstraintName("FK_Tourist_destination_Photo");

                    b.HasOne("ASP.NETCORE.API.Models.PlaceDestinations", "PlaceDestination")
                        .WithMany("TouristDestinations")
                        .HasForeignKey("PlaceDestinationId")
                        .HasConstraintName("FK_Tourist_destination_Place_destination");

                    b.HasOne("ASP.NETCORE.API.Models.TouristDestinations", "TouristDestination")
                        .WithOne("InverseTouristDestination")
                        .HasForeignKey("ASP.NETCORE.API.Models.TouristDestinations", "TouristDestinationId")
                        .HasConstraintName("FK_TouristDestinations_TouristDestinations");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.Tours", b =>
                {
                    b.HasOne("ASP.NETCORE.API.Models.FoodType", "FoodType")
                        .WithMany("Tours")
                        .HasForeignKey("FoodTypeId")
                        .HasConstraintName("FK_Tours_FoodType");

                    b.HasOne("ASP.NETCORE.API.Models.RoomType", "RoomType")
                        .WithMany("Tours")
                        .HasForeignKey("RoomTypeId")
                        .HasConstraintName("FK_Tours_RoomType");

                    b.HasOne("ASP.NETCORE.API.Models.TourOperators", "TourOperator")
                        .WithMany("Tours")
                        .HasForeignKey("TourOperatorId")
                        .HasConstraintName("FK_Tour_Tour_operator");

                    b.HasOne("ASP.NETCORE.API.Models.TouristDestinations", "TouristDestination")
                        .WithMany("Tours")
                        .HasForeignKey("TouristDestinationId")
                        .HasConstraintName("FK_Tour_Tourist_destination");

                    b.HasOne("ASP.NETCORE.API.Models.Transports", "Transport")
                        .WithMany("Tours")
                        .HasForeignKey("TransportId")
                        .HasConstraintName("FK_Tour_Transport");
                });

            modelBuilder.Entity("ASP.NETCORE.API.Models.TransportSerAtTour", b =>
                {
                    b.HasOne("ASP.NETCORE.API.Models.TouristDestinations", "TouristDestinations")
                        .WithMany("TransportSerAtTour")
                        .HasForeignKey("TouristDestinationsId")
                        .HasConstraintName("FK_TransportSerAtTour_TouristDestinations");

                    b.HasOne("ASP.NETCORE.API.Models.TransportSer", "TransportSer")
                        .WithMany("TransportSerAtTour")
                        .HasForeignKey("TransportSerId")
                        .HasConstraintName("FK_TransportSerAtTour_TransportSer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ASP.NETCORE.API.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ASP.NETCORE.API.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ASP.NETCORE.API.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ASP.NETCORE.API.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
